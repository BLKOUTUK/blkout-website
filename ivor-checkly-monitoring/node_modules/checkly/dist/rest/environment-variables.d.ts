import { type AxiosInstance } from 'axios';
export interface EnvironmentVariable {
    key: string;
    value: string;
    locked: boolean;
    secret?: boolean;
}
/**
 * Error thrown when the requested environment variable does not exist.
 */
export declare class EnvironmentVariableNotFoundError extends Error {
    environmentVariable: string;
    constructor(environmentVariable: string, options?: ErrorOptions);
}
/**
 * Error thrown when the requested environment variable already exists.
 */
export declare class EnvironmentVariableAlreadyExistsError extends Error {
    environmentVariable: string;
    constructor(environmentVariable: string, options?: ErrorOptions);
}
declare class EnvironmentVariables {
    api: AxiosInstance;
    constructor(api: AxiosInstance);
    getAll(): Promise<import("axios").AxiosResponse<EnvironmentVariable[], any>>;
    /**
     * @throws {EnvironmentVariableNotFoundError} If the environment variable does not exist.
     */
    delete(environmentVariableKey: string): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * @throws {EnvironmentVariableAlreadyExistsError} If the environment variable already exists.
     */
    add(environmentVariableKey: string, environmentVariableValue: string, locked?: boolean, secret?: boolean): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * @throws {EnvironmentVariableNotFoundError} If the environment variable does not exist.
     */
    get(environmentVariableKey: string): Promise<import("axios").AxiosResponse<EnvironmentVariable, any>>;
    /**
     * @throws {EnvironmentVariableNotFoundError} If the environment variable does not exist.
    */
    update(environmentVariableKey: string, environmentVariableValue: string, locked?: boolean, secret?: boolean): Promise<import("axios").AxiosResponse<any, any>>;
}
export default EnvironmentVariables;
