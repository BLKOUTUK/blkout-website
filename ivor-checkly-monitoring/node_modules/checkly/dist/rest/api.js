"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.checklyStorage = exports.heartbeatCheck = exports.environmentVariables = exports.testSessions = exports.privateLocations = exports.locations = exports.runtimes = exports.assets = exports.projects = exports.user = exports.accounts = exports.api = exports.responseErrorInterceptor = exports.requestInterceptor = exports.validateAuthentication = exports.getDefaults = void 0;
const axios_1 = __importDefault(require("axios"));
const ci_info_1 = require("ci-info");
const config_1 = __importDefault(require("../services/config"));
const util_1 = require("../services/util");
const accounts_1 = __importDefault(require("./accounts"));
const users_1 = __importDefault(require("./users"));
const projects_1 = __importDefault(require("./projects"));
const assets_1 = __importDefault(require("./assets"));
const runtimes_1 = __importDefault(require("./runtimes"));
const private_locations_1 = __importDefault(require("./private-locations"));
const locations_1 = __importDefault(require("./locations"));
const test_sessions_1 = __importDefault(require("./test-sessions"));
const environment_variables_1 = __importDefault(require("./environment-variables"));
const heartbeat_checks_1 = __importDefault(require("./heartbeat-checks"));
const checkly_storage_1 = __importDefault(require("./checkly-storage"));
const errors_1 = require("./errors");
function getDefaults() {
    const apiKey = config_1.default.getApiKey();
    const accountId = config_1.default.getAccountId();
    const baseURL = config_1.default.getApiUrl();
    const Authorization = `Bearer ${apiKey}`;
    return { baseURL, accountId, Authorization, apiKey };
}
exports.getDefaults = getDefaults;
async function validateAuthentication() {
    // This internal environment variable allows auth checks to be skipped
    // when using e.g. debug flags that don't actually need to authenticate
    // with the Checkly API.
    if (process.env.CHECKLY_SKIP_AUTH === '1') {
        return;
    }
    if (!config_1.default.hasValidCredentials()) {
        throw new Error('Run `npx checkly login` or manually set `CHECKLY_API_KEY` '
            + '& `CHECKLY_ACCOUNT_ID` environment variables to setup authentication.');
    }
    const accountId = config_1.default.getAccountId();
    const apiKey = config_1.default.getApiKey();
    try {
        // check if credentials works
        const resp = await exports.accounts.get(accountId);
        return resp.data;
    }
    catch (err) {
        if (err instanceof errors_1.UnauthorizedError) {
            throw new Error(`Authentication failed with account id "${accountId}" `
                + `and API key "...${apiKey?.slice(-4)}"`);
        }
        throw err;
    }
}
exports.validateAuthentication = validateAuthentication;
function requestInterceptor(config) {
    const { Authorization, accountId } = getDefaults();
    if (Authorization && config.headers) {
        config.headers.Authorization = Authorization;
    }
    if (accountId && config.headers) {
        config.headers['x-checkly-account'] = accountId;
    }
    config.headers['x-checkly-ci-name'] = ci_info_1.name;
    return config;
}
exports.requestInterceptor = requestInterceptor;
function responseErrorInterceptor(error) {
    (0, errors_1.handleErrorResponse)(error);
}
exports.responseErrorInterceptor = responseErrorInterceptor;
function init() {
    const { baseURL } = getDefaults();
    const axiosConf = (0, util_1.assignProxy)(baseURL, { baseURL });
    const api = axios_1.default.create(axiosConf);
    api.interceptors.request.use(requestInterceptor);
    api.interceptors.response.use(response => response, responseErrorInterceptor);
    return api;
}
exports.api = init();
exports.accounts = new accounts_1.default(exports.api);
exports.user = new users_1.default(exports.api);
exports.projects = new projects_1.default(exports.api);
exports.assets = new assets_1.default(exports.api);
exports.runtimes = new runtimes_1.default(exports.api);
exports.locations = new locations_1.default(exports.api);
exports.privateLocations = new private_locations_1.default(exports.api);
exports.testSessions = new test_sessions_1.default(exports.api);
exports.environmentVariables = new environment_variables_1.default(exports.api);
exports.heartbeatCheck = new heartbeat_checks_1.default(exports.api);
exports.checklyStorage = new checkly_storage_1.default(exports.api);
//# sourceMappingURL=api.js.map