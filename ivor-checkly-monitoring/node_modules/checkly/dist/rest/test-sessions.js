"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NoMatchingChecksError = void 0;
const util_1 = require("./util");
const errors_1 = require("./errors");
class NoMatchingChecksError extends Error {
    constructor(options) {
        super(`No matching checks found.`, options);
        this.name = 'NoMatchingChecksError';
    }
}
exports.NoMatchingChecksError = NoMatchingChecksError;
class TestSessions {
    api;
    constructor(api) {
        this.api = api;
    }
    async run(payload) {
        return await this.api.post('/next/test-sessions/run', payload, {
            transformRequest: util_1.compressJSONPayload,
        });
    }
    /**
     * @throws {NoMatchingChecksError} If no checks matched the request.
     */
    async trigger(payload) {
        try {
            const resp = await this.api.post('/next/test-sessions/trigger', payload);
            if (resp.data.checks.length === 0) {
                // Currently the BE will never return an empty `checks` array, it returns a 403 instead.
                // This is added to make the old CLI versions compatible if we ever change this, though.
                throw new NoMatchingChecksError();
            }
            return resp;
        }
        catch (err) {
            if (err instanceof errors_1.ForbiddenError && err.data.errorCode === 'ERR_NO_MATCHING_CHECKS') {
                throw new NoMatchingChecksError();
            }
            throw err;
        }
    }
    getShortLink(id) {
        return this.api.get(`/next/test-sessions/${id}/link`);
    }
    getResultShortLinks(testSessionId, testResultId) {
        return this.api.get(`/next/test-sessions/${testSessionId}/results/${testResultId}/links`);
    }
}
exports.default = TestSessions;
//# sourceMappingURL=test-sessions.js.map