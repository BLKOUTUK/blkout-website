"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handleErrorResponse = exports.MissingResponseError = exports.parseErrorData = exports.RequestTimeoutError = exports.MiscellaneousError = exports.ServerError = exports.ConflictError = exports.ForbiddenError = exports.NotFoundError = exports.InadequateEntitlementsError = exports.UnauthorizedError = exports.ValidationError = exports.ApiError = void 0;
const axios_1 = require("axios");
class ApiError extends Error {
    data;
    constructor(data, options) {
        super(data.message, options);
        this.name = 'ApiError';
        this.data = data;
    }
}
exports.ApiError = ApiError;
/**
 * Error thrown when an API response indicates that the request was not valid.
 */
class ValidationError extends ApiError {
    constructor(data, options) {
        super(data, options);
        this.name = 'ValidationError';
    }
}
exports.ValidationError = ValidationError;
/**
 * Error thrown when an API response indicates that the request was not
 * authorized.
 */
class UnauthorizedError extends ApiError {
    constructor(data, options) {
        super(data, options);
        this.name = 'UnauthorizedError';
    }
}
exports.UnauthorizedError = UnauthorizedError;
/**
 * Error thrown when an API response indicates that the operation exceeded
 * the capabilities of the user's payment plan. Examples include:
 *
 *   - Using features not included in the user's plan
 *   - Exceeding the resource limits of the plan
 */
class InadequateEntitlementsError extends ApiError {
    constructor(data, options) {
        super(data, options);
        this.name = 'InadequateEntitlementsError';
    }
}
exports.InadequateEntitlementsError = InadequateEntitlementsError;
/**
 * Error thrown when an API response indicates that the requested resource
 * could not be found.
 */
class NotFoundError extends ApiError {
    constructor(data, options) {
        super(data, options);
        this.name = 'NotFoundError';
    }
}
exports.NotFoundError = NotFoundError;
/**
 * Error thrown when an API response indicates that the request was not
 * allowed.
 */
class ForbiddenError extends ApiError {
    constructor(data, options) {
        super(data, options);
        this.name = 'ForbiddenError';
    }
}
exports.ForbiddenError = ForbiddenError;
/**
 * Error thrown when an API response indicates that the request conflicts
 * with server state.
 */
class ConflictError extends ApiError {
    constructor(data, options) {
        super(data, options);
        this.name = 'ConflictError';
    }
}
exports.ConflictError = ConflictError;
/**
 * Error thrown when an API response indicates a server error.
 */
class ServerError extends ApiError {
    constructor(data, options) {
        super(data, options);
        this.name = 'ServerError';
    }
}
exports.ServerError = ServerError;
/**
 * Error thrown when an API response indicates an error that is not handled
 * globally.
 */
class MiscellaneousError extends ApiError {
    constructor(data, options) {
        super(data, options);
        this.name = 'MiscellaneousError';
    }
}
exports.MiscellaneousError = MiscellaneousError;
/**
 * Error thrown when an API request times out.
 */
class RequestTimeoutError extends ApiError {
    constructor(data, options) {
        super(data, options);
        this.name = 'RequestTimeoutError';
    }
}
exports.RequestTimeoutError = RequestTimeoutError;
function isErrorData(value) {
    const o = Object(value);
    return 'statusCode' in o
        && 'error' in o
        && 'message' in o;
}
function parseErrorData(data, options) {
    if (isErrorData(data)) {
        return {
            ...data,
            // Prefer the actual HTTP status code from the options just in case the
            // payload doesn't match.
            statusCode: options.statusCode,
        };
    }
    if (isErrorOnlyErrorData(data)) {
        return normalizeErrorOnlyErrorData(data, options);
    }
    if (isMessageAndErrorCodeErrorData(data)) {
        return normalizeMessageAndErrorCodeErrorData(data, options);
    }
    if (isStringErrorData(data)) {
        return normalizeStringErrorData(data, options);
    }
}
exports.parseErrorData = parseErrorData;
function isErrorOnlyErrorData(value) {
    return 'error' in Object(value);
}
function normalizeErrorOnlyErrorData(data, { statusCode }) {
    return {
        ...data,
        statusCode,
        message: data.error,
    };
}
function isMessageAndErrorCodeErrorData(value) {
    const o = Object(value);
    return 'message' in o
        && 'errorCode' in o;
}
function normalizeMessageAndErrorCodeErrorData(data, { statusCode }) {
    return {
        ...data,
        statusCode,
        error: data.message,
    };
}
function isStringErrorData(value) {
    return typeof value === 'string';
}
function normalizeStringErrorData(data, { statusCode }) {
    return {
        statusCode,
        error: data,
        message: data,
    };
}
/**
 * Error thrown when an API request unexpectedly produces no response.
 */
class MissingResponseError extends Error {
    constructor(options) {
        super(`Encountered an error connecting to Checkly. Please check that `
            + `the internet connection is working.`
            + `\n\n`
            + `Details: ${options.cause}`, options);
        this.name = 'MissingResponseError';
    }
}
exports.MissingResponseError = MissingResponseError;
function handleErrorResponse(err) {
    if ((0, axios_1.isAxiosError)(err)) {
        if (!err.response) {
            throw new MissingResponseError({ cause: err });
        }
        const { status: statusCode, data } = err.response;
        const errorData = parseErrorData(data, {
            statusCode,
        });
        if (errorData !== undefined) {
            if (statusCode === 400) {
                throw new ValidationError(errorData, { cause: err });
            }
            if (statusCode === 401) {
                throw new UnauthorizedError(errorData, { cause: err });
            }
            if (statusCode === 402) {
                throw new InadequateEntitlementsError(errorData, { cause: err });
            }
            if (statusCode === 403) {
                throw new ForbiddenError(errorData, { cause: err });
            }
            if (statusCode === 404) {
                throw new NotFoundError(errorData, { cause: err });
            }
            if (statusCode === 408) {
                throw new RequestTimeoutError(errorData, { cause: err });
            }
            if (statusCode === 409) {
                throw new ConflictError(errorData, { cause: err });
            }
            if (statusCode >= 500) {
                throw new ServerError(errorData, { cause: err });
            }
            throw new MiscellaneousError(errorData, { cause: err });
        }
        if (statusCode === 408) {
            throw new RequestTimeoutError({
                statusCode,
                error: 'Request Timeout',
                message: 'Encountered an error connecting to Checkly. '
                    + 'This can be triggered by a slow internet connection or a network with high packet loss.',
            });
        }
    }
    throw err;
}
exports.handleErrorResponse = handleErrorResponse;
//# sourceMappingURL=errors.js.map