"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EnvironmentVariableAlreadyExistsError = exports.EnvironmentVariableNotFoundError = void 0;
const errors_1 = require("./errors");
/**
 * Error thrown when the requested environment variable does not exist.
 */
class EnvironmentVariableNotFoundError extends Error {
    environmentVariable;
    constructor(environmentVariable, options) {
        super(`Environment variable "${environmentVariable}" does not exist.`, options);
        this.name = 'EnvironmentVariableNotFoundError';
        this.environmentVariable = environmentVariable;
    }
}
exports.EnvironmentVariableNotFoundError = EnvironmentVariableNotFoundError;
/**
 * Error thrown when the requested environment variable already exists.
 */
class EnvironmentVariableAlreadyExistsError extends Error {
    environmentVariable;
    constructor(environmentVariable, options) {
        super(`Environment variable "${environmentVariable}" already exists.`, options);
        this.name = 'EnvironmentVariableAlreadyExistsError';
        this.environmentVariable = environmentVariable;
    }
}
exports.EnvironmentVariableAlreadyExistsError = EnvironmentVariableAlreadyExistsError;
class EnvironmentVariables {
    api;
    constructor(api) {
        this.api = api;
    }
    getAll() {
        return this.api.get('/v1/variables');
    }
    /**
     * @throws {EnvironmentVariableNotFoundError} If the environment variable does not exist.
     */
    async delete(environmentVariableKey) {
        try {
            return await this.api.delete(`/v1/variables/${environmentVariableKey}`);
        }
        catch (err) {
            if (err instanceof errors_1.NotFoundError) {
                throw new EnvironmentVariableNotFoundError(environmentVariableKey);
            }
            throw err;
        }
    }
    /**
     * @throws {EnvironmentVariableAlreadyExistsError} If the environment variable already exists.
     */
    async add(environmentVariableKey, environmentVariableValue, locked = false, secret = false) {
        try {
            return await this.api.post('/v1/variables', { key: environmentVariableKey, value: environmentVariableValue, locked, secret });
        }
        catch (err) {
            if (err instanceof errors_1.ConflictError) {
                throw new EnvironmentVariableAlreadyExistsError(environmentVariableKey);
            }
            throw err;
        }
    }
    /**
     * @throws {EnvironmentVariableNotFoundError} If the environment variable does not exist.
     */
    async get(environmentVariableKey) {
        try {
            return await this.api.get(`/v1/variables/${environmentVariableKey}`);
        }
        catch (err) {
            if (err instanceof errors_1.NotFoundError) {
                throw new EnvironmentVariableNotFoundError(environmentVariableKey);
            }
            throw err;
        }
    }
    /**
     * @throws {EnvironmentVariableNotFoundError} If the environment variable does not exist.
    */
    // update environment variable with default locked value false
    async update(environmentVariableKey, environmentVariableValue, locked = false, secret = false) {
        try {
            return await this.api.put(`/v1/variables/${environmentVariableKey}`, { value: environmentVariableValue, locked, secret });
        }
        catch (err) {
            if (err instanceof errors_1.NotFoundError) {
                throw new EnvironmentVariableNotFoundError(environmentVariableKey);
            }
            throw err;
        }
    }
}
exports.default = EnvironmentVariables;
//# sourceMappingURL=environment-variables.js.map