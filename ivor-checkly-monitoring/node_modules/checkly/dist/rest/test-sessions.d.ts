import { type AxiosInstance } from 'axios';
import { GitInformation } from '../services/util';
import { RetryStrategy, SharedFile } from '../constructs';
import { SequenceId } from '../services/abstract-check-runner';
type RunTestSessionRequest = {
    name: string;
    checkRunJobs: any[];
    project: {
        logicalId: string;
    };
    sharedFiles?: SharedFile[];
    runLocation: string | {
        type: 'PUBLIC';
        region: string;
    } | {
        type: 'PRIVATE';
        slugName: string;
        id: string;
    };
    repoInfo?: GitInformation | null;
    environment?: string | null;
    shouldRecord: boolean;
};
type TriggerTestSessionRequest = {
    name: string;
    runLocation: string | {
        type: 'PUBLIC';
        region: string;
    } | {
        type: 'PRIVATE';
        slugName: string;
        id: string;
    };
    shouldRecord: boolean;
    targetTags: string[][];
    checkRunSuiteId: string;
    environmentVariables: Array<{
        key: string;
        value: string;
    }>;
    repoInfo: GitInformation | null;
    environment: string | null;
    testRetryStrategy: RetryStrategy | null;
};
export type TestResultsShortLinks = {
    testResultLink: string;
    testTraceLinks: string[];
    videoLinks: string[];
    screenshotLinks: string[];
};
export type TriggerTestSessionResponse = {
    checks: Array<any>;
    testSessionId: string;
    testResultIds: Record<string, string>;
    sequenceIds: Record<string, SequenceId>;
};
export declare class NoMatchingChecksError extends Error {
    constructor(options?: ErrorOptions);
}
declare class TestSessions {
    api: AxiosInstance;
    constructor(api: AxiosInstance);
    run(payload: RunTestSessionRequest): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * @throws {NoMatchingChecksError} If no checks matched the request.
     */
    trigger(payload: TriggerTestSessionRequest): Promise<import("axios").AxiosResponse<TriggerTestSessionResponse, any>>;
    getShortLink(id: string): Promise<import("axios").AxiosResponse<{
        link: string;
    }, any>>;
    getResultShortLinks(testSessionId: string, testResultId: string): Promise<import("axios").AxiosResponse<TestResultsShortLinks, any>>;
}
export default TestSessions;
