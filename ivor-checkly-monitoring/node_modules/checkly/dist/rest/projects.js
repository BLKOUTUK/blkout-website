"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InvalidImportPlanStateError = exports.ImportPlanNotFoundError = exports.NoImportableResourcesFoundError = exports.ProjectAlreadyExistsError = exports.ProjectNotFoundError = void 0;
const util_1 = require("./util");
const errors_1 = require("./errors");
class ProjectNotFoundError extends Error {
    logicalId;
    constructor(logicalId, options) {
        super(`Project "${logicalId}" does not exist.`, options);
        this.name = 'ProjectNotFoundError';
        this.logicalId = logicalId;
    }
}
exports.ProjectNotFoundError = ProjectNotFoundError;
class ProjectAlreadyExistsError extends Error {
    logicalId;
    constructor(logicalId, options) {
        super(`You are already using the logicalId "${logicalId}" for a different project.`, options);
        this.name = 'ProjectAlreadyExistsError';
        this.logicalId = logicalId;
    }
}
exports.ProjectAlreadyExistsError = ProjectAlreadyExistsError;
class NoImportableResourcesFoundError extends Error {
    constructor(options) {
        super(`No importable resources were found.`, options);
        this.name = 'NoImportableResourcesFoundError';
    }
}
exports.NoImportableResourcesFoundError = NoImportableResourcesFoundError;
class ImportPlanNotFoundError extends Error {
    constructor(options) {
        super(`Import plan does not exist.`, options);
        this.name = 'ImportPlanNotFoundError';
    }
}
exports.ImportPlanNotFoundError = ImportPlanNotFoundError;
class InvalidImportPlanStateError extends Error {
    constructor(options) {
        super(`Invalid state for import plan.`, options);
        this.name = 'InvalidImportPlanStateError';
    }
}
exports.InvalidImportPlanStateError = InvalidImportPlanStateError;
class Projects {
    api;
    constructor(api) {
        this.api = api;
    }
    getAll() {
        return this.api.get('/next/projects');
    }
    /**
     * @throws {ProjectNotFoundError} If the project does not exist.
     */
    async get(logicalId) {
        try {
            const logicalIdParam = encodeURIComponent(logicalId);
            return await this.api.get(`/next/projects/${logicalIdParam}`);
        }
        catch (err) {
            if (err instanceof errors_1.NotFoundError) {
                throw new ProjectNotFoundError(logicalId);
            }
            throw err;
        }
    }
    /**
     * @throws {ProjectAlreadyExistsError} If the project already exists.
     */
    async create(project) {
        try {
            return await this.api.post('/next/projects', project);
        }
        catch (err) {
            if (err instanceof errors_1.ConflictError) {
                throw new ProjectAlreadyExistsError(project.logicalId);
            }
            throw err;
        }
    }
    /**
     * @throws {ProjectNotFoundError} If the project does not exist.
     */
    async deleteProject(logicalId) {
        try {
            const logicalIdParam = encodeURIComponent(logicalId);
            return await this.api.delete(`/next/projects/${logicalIdParam}`);
        }
        catch (err) {
            if (err instanceof errors_1.NotFoundError) {
                throw new ProjectNotFoundError(logicalId);
            }
            throw err;
        }
    }
    deploy(resources, { dryRun = false, scheduleOnDeploy = true } = {}) {
        return this.api.post(`/next-v2/projects/deploy?dryRun=${dryRun}&scheduleOnDeploy=${scheduleOnDeploy}`, resources, { transformRequest: util_1.compressJSONPayload });
    }
    /**
     * @throws {ProjectNotFoundError} If the project does not exist.
     * @throws {NoImportableResourcesFoundError} If no importable resources were found.
     */
    async createImportPlan(logicalId, options) {
        const payload = {
            filters: options?.filters,
            friends: options?.friends,
        };
        try {
            const logicalIdParam = encodeURIComponent(logicalId);
            return await this.api.post(`/next/projects/${logicalIdParam}/imports`, payload, {
                params: {
                    preview: options?.preview ?? false,
                },
            });
        }
        catch (err) {
            if (err instanceof errors_1.NotFoundError) {
                if (/No importable resources were found/i.test(err.data.message)) {
                    throw new NoImportableResourcesFoundError();
                }
                throw new ProjectNotFoundError(logicalId);
            }
            throw err;
        }
    }
    /**
     * @throws {ProjectNotFoundError} If the project does not exist.
     */
    async findImportPlans(logicalId, { onlyUnapplied = false, onlyUncommitted = false } = {}) {
        try {
            const logicalIdParam = encodeURIComponent(logicalId);
            return await this.api.get(`/next/projects/${logicalIdParam}/imports`, {
                params: {
                    onlyUnapplied,
                    onlyUncommitted,
                },
            });
        }
        catch (err) {
            if (err instanceof errors_1.NotFoundError) {
                throw new ProjectNotFoundError(logicalId);
            }
            throw err;
        }
    }
    listImportPlans({ onlyUnapplied = false, onlyUncommitted = false } = {}) {
        return this.api.get('/next/projects/imports', {
            params: {
                onlyUnapplied,
                onlyUncommitted,
            },
        });
    }
    /**
     * @throws {ImportPlanNotFoundError} If the import plan does not exist.
     * @throws {InvalidImportPlanStateError} If the operation is performed out of order.
     */
    async cancelImportPlan(importPlanId) {
        try {
            return await this.api.delete(`/next/projects/imports/${importPlanId}`);
        }
        catch (err) {
            if (err instanceof errors_1.ForbiddenError) {
                throw new InvalidImportPlanStateError();
            }
            if (err instanceof errors_1.NotFoundError) {
                throw new ImportPlanNotFoundError();
            }
            throw err;
        }
    }
    /**
     * @throws {ImportPlanNotFoundError} If the import plan does not exist.
     * @throws {InvalidImportPlanStateError} If the operation is performed out of order.
     */
    async applyImportPlan(importPlanId) {
        try {
            return await this.api.post(`/next/projects/imports/${importPlanId}/apply`);
        }
        catch (err) {
            if (err instanceof errors_1.ForbiddenError) {
                throw new InvalidImportPlanStateError();
            }
            if (err instanceof errors_1.NotFoundError) {
                throw new ImportPlanNotFoundError();
            }
            throw err;
        }
    }
    /**
     * @throws {ImportPlanNotFoundError} If the import plan does not exist.
     * @throws {InvalidImportPlanStateError} If the operation is performed out of order.
     */
    async commitImportPlan(importPlanId) {
        try {
            return await this.api.post(`/next/projects/imports/${importPlanId}/commit`);
        }
        catch (err) {
            if (err instanceof errors_1.ForbiddenError) {
                throw new InvalidImportPlanStateError();
            }
            if (err instanceof errors_1.NotFoundError) {
                throw new ImportPlanNotFoundError();
            }
            throw err;
        }
    }
}
exports.default = Projects;
//# sourceMappingURL=projects.js.map