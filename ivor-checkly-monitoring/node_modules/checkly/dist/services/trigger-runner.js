"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const api_1 = require("../rest/api");
const abstract_check_runner_1 = __importDefault(require("./abstract-check-runner"));
class TriggerRunner extends abstract_check_runner_1.default {
    shouldRecord;
    location;
    targetTags;
    envVars;
    repoInfo;
    environment;
    testSessionName;
    testRetryStrategy;
    constructor(accountId, timeout, verbose, shouldRecord, location, targetTags, envVars, repoInfo, environment, testSessionName, testRetryStrategy) {
        super(accountId, timeout, verbose);
        this.shouldRecord = shouldRecord;
        this.location = location;
        this.targetTags = targetTags;
        this.envVars = envVars;
        this.repoInfo = repoInfo;
        this.environment = environment;
        this.testSessionName = testSessionName;
        this.testRetryStrategy = testRetryStrategy;
    }
    async scheduleChecks(checkRunSuiteId) {
        const { data } = await api_1.testSessions.trigger({
            name: this.testSessionName ?? 'Triggered Session',
            shouldRecord: this.shouldRecord,
            runLocation: this.location,
            checkRunSuiteId,
            targetTags: this.targetTags,
            environmentVariables: this.envVars,
            repoInfo: this.repoInfo,
            environment: this.environment,
            testRetryStrategy: this.testRetryStrategy,
        });
        const { checks, testSessionId, sequenceIds, } = data;
        const augmentedChecks = checks.map(check => ({
            check,
            sequenceId: sequenceIds?.[check.id],
        }));
        return { checks: augmentedChecks, testSessionId };
    }
}
exports.default = TriggerRunner;
//# sourceMappingURL=trigger-runner.js.map